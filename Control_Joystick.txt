//codigo control de servomotores con joystick

#include <Servo.h>

Servo myservo;  // Crea un objeto Servo

// Pin del módulo de joystick para el eje X
const int pinX = A0; // Conectar la salida X del joystick a A0

// Pin de los botones del joystick
const int buttonPin1 = 2; // Conectar el primer botón del joystick a pin 2
const int buttonPin2 = 3; // Conectar el segundo botón del joystick a pin 3

// Rango de valores del joystick
const int minJoystickValue = 0;
const int maxJoystickValue = 1023;

// Rango de ángulo del servomotor
const int minServoAngle = 0;
const int maxServoAngle = 180;

bool button1Pressed = false;
int savedAngle = 90; // Ángulo inicial guardado
int currentAngle = 90; // Ángulo actual del servo

void setup() {
  myservo.attach(6);  // Asocia el objeto Servo al pin 6
  pinMode(buttonPin1, INPUT_PULLUP); // Configura el primer botón como entrada con resistencia pull-up
  pinMode(buttonPin2, INPUT_PULLUP); // Configura el segundo botón como entrada con resistencia pull-up
}

void loop() {
  // Lee el valor del eje X del joystick
  int xValue = analogRead(pinX);

  // Mapea el valor del eje X del joystick al rango de ángulo del servomotor
  int targetAngle = map(xValue, minJoystickValue, maxJoystickValue, minServoAngle, maxServoAngle);

  // Controla el movimiento del servo
  if (targetAngle < currentAngle) {
    currentAngle--;
  } else if (targetAngle > currentAngle) {
    currentAngle++;
  }

  // Lee el estado del botón 1
  button1Pressed = digitalRead(buttonPin1) == LOW;

  // Si el botón 1 está presionado, guarda el ángulo actual en savedAngle
  if (button1Pressed) {
    savedAngle = currentAngle;
  }

  // Si el botón 1 no está presionado, mueve el servo al ángulo guardado
  if (!button1Pressed) {
    myservo.write(savedAngle);
  } else {
    // Si el botón 1 está presionado, mueve el servo al ángulo actual
    myservo.write(currentAngle);
  }

  // Espera un breve período de tiempo
  delay(20);
}